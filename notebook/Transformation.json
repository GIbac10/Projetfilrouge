{
	"name": "Transformation",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "JGOCDE",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3e789d5b-39a9-4cc1-8719-ebb15f8ec28c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e6c8c821-d880-4476-bb09-c266d937bc05/resourceGroups/Ecoledeladata/providers/Microsoft.Synapse/workspaces/ecoledatagroupeocde/bigDataPools/JGOCDE",
				"name": "JGOCDE",
				"type": "Spark",
				"endpoint": "https://ecoledatagroupeocde.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/JGOCDE",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"// SUPPRESSION GEO,ALB,MKD ...\r\n",
					"\r\n",
					"val listepays = List(\"AUT\",\"BEL\",\"CZE\" ,\"DNK\",\"FIN\",\"FRA\",\"DEU\" ,\"GRC\", \"HUN\" ,\"ISL\",\"IRL\" ,\r\n",
					"                            \"ITA\",\"LUX\" ,\"NLD\" ,\"NOR\",\"POL\",\"PRT\",\"SVK\",\"ESP\", \"SWE\" ,\"CHE\" ,\"TUR\", \r\n",
					"                            \"GBR\", \"EST\" ,\"RUS\", \"SVN\", \"LVA\", \"LTU\" ,\"BGR\" ,\"HRV\" ,\"CYP\", \"MLT\", \r\n",
					"                            \"ROU\" , \"SRB\")\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"// Transformation depensesante\r\n",
					"val depensesante = spark.read.parquet(\"abfss://ocde@groupeocde.dfs.core.windows.net/bronze/depensesante\")\r\n",
					"\r\n",
					"// SUPPRESSION COLONNES + FILTRE PAYS ETUDIES\r\n",
					"val depensesante_supp_colonnes = depensesante.drop(\"HF\",\"HC\",\"HP\",\"MEASURE\")\r\n",
					"val depensesante_filtre_pays = depensesante_supp_colonnes.filter(depensesante_supp_colonnes(\"LOCATION\").isin(listepays:_*))\r\n",
					"val depensesante_clean = depensesante_filtre_pays.withColumnRenamed(\"value\",\"DEPENSE_SANTE_%_PIB\").orderBy(\"LOCATION\")\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"depensesante.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"depensesante_clean.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"// ------------------- TRANSFORMATION POPULATION -----------------\r\n",
					"\r\n",
					"// LECTURE FICHIER PARQUET \r\n",
					"val population = spark.read.parquet(\"abfss://ocde@groupeocde.dfs.core.windows.net/bronze/population\")\r\n",
					"\r\n",
					"// SUPPRESSION COLONNES + FILTRE PAYS ETUDIES\r\n",
					"val population_supp_colonnes = population.drop(\"SEX\")\r\n",
					"val population_filtre_pays = population_supp_colonnes.filter(population_supp_colonnes(\"LOCATION\").isin(listepays:_*))\r\n",
					"\r\n",
					"val population_less_15 = population_filtre_pays.filter(population_supp_colonnes(\"AGE\") === \"LESS_15_SHARE\")\r\n",
					"val population_less_15_clean = population_less_15.withColumnRenamed(\"value\",\"LESS_15_SHARE\").drop(\"AGE\").orderBy(\"LOCATION\")\r\n",
					"\r\n",
					"\r\n",
					"// CREATION DE 3 TABLES POUR CHAQUE VALEURS DE AGE + CHANGEMENT NOM COLONNES\r\n",
					"val population_15_64 = population_filtre_pays.filter(population_supp_colonnes(\"AGE\") === \"15-64_SHARE\")\r\n",
					"val population_15_64_clean = population_15_64.withColumnRenamed(\"value\",\"15-64_SHARE\").drop(\"AGE\").orderBy(\"LOCATION\")\r\n",
					"\r\n",
					"val population_65_plus = population_filtre_pays.filter(population_supp_colonnes(\"AGE\") === \"65_OVER_SHARE\")\r\n",
					"val population_65_plus_clean = population_65_plus.withColumnRenamed(\"value\",\"65_OVER_SHARE\").drop(\"AGE\").orderBy(\"LOCATION\")\r\n",
					"\r\n",
					"val population_totale = population_filtre_pays.filter(population_supp_colonnes(\"AGE\") === \"TOTAL\")\r\n",
					"val population_totale_clean = population_totale.withColumnRenamed(\"value\",\"Nombre_habitants\").drop(\"AGE\").orderBy(\"LOCATION\")\r\n",
					"\r\n",
					"// JOINTURES\r\n",
					"val population_less_64 = population_less_15_clean.join(population_15_64_clean, Seq(\"LOCATION\",\"TIME_PERIOD\"), \"inner\")\r\n",
					"val population_full = population_less_64.join(population_65_plus_clean, Seq(\"LOCATION\",\"TIME_PERIOD\"), \"inner\")\r\n",
					"val population_clean = population_full.join(population_totale_clean, Seq(\"LOCATION\",\"TIME_PERIOD\"), \"inner\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"population.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"population_clean.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"// Transformation pib\r\n",
					"val pib = spark.read.parquet(\"abfss://ocde@groupeocde.dfs.core.windows.net/bronze/pib\")\r\n",
					"\r\n",
					"\r\n",
					"// SUPPRESSION COLONNES + FILTRE PAYS ETUDIES\r\n",
					"val pib_supp_colonnes = pib.drop(\"TRANSACT\",\"MEASURE\")\r\n",
					"val pib_filtre_pays = pib_supp_colonnes.filter(pib_supp_colonnes(\"LOCATION\").isin(listepays:_*))\r\n",
					"val pib_clean = pib_filtre_pays.withColumnRenamed(\"value\",\"PIB (Milliers Dollards)\").orderBy(\"LOCATION\",\"TIME_PERIOD\")\r\n",
					"\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pib.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"pib_clean.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"// Transformation couverturesociale\r\n",
					"val couverturesociale = spark.read.parquet(\"abfss://ocde@groupeocde.dfs.core.windows.net/bronze/couverturesociale\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 74
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"couverturesociale.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"// Transformation depensesociale\r\n",
					"val depensesociale = spark.read.parquet(\"abfss://ocde@groupeocde.dfs.core.windows.net/bronze/depensessociales\")\r\n",
					"\r\n",
					"// SUPPRESSION COLONNES + FILTRE PAYS ETUDIES\r\n",
					"val depensesociale_supp_colonnes = depensesociale.drop(\"SOURCE\",\"BRANCH\",\"TYPEXP\",\"TYPROG\",\"UNIT\")\r\n",
					"\r\n",
					"val depensesociale_filtre_pays = depensesociale_supp_colonnes\r\n",
					"    .filter(depensesociale_supp_colonnes(\"COUNTRY\")\r\n",
					"    .isin(listepays:_*))\r\n",
					"\r\n",
					"val depensesociale_clean = depensesociale_filtre_pays\r\n",
					"    .withColumnRenamed(\"value\",\"DEPENSES_SOCIALES (% PIB)\")\r\n",
					"    .withColumnRenamed(\"COUNTRY\",\"LOCATION\")\r\n",
					"    .orderBy(\"COUNTRY\",\"TIME_PERIOD\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"depensesociale.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"depensesociale_clean.show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"// Transformation cotisationsecu\r\n",
					"val cotisationsecu = spark.read.parquet(\"abfss://ocde@groupeocde.dfs.core.windows.net/bronze/cotisationsecu\")"
				],
				"execution_count": null
			}
		]
	}
}